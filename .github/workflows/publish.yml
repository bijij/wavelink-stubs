name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Get version
      id: version
      run: |
        echo ::set-output name=version::${GITHUB_REF#refs/tags/v}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.1.4
        virtualenvs-create: true
        virtualenvs-in-project: true
        virtualenvs-path: .venv

    - name: Install Dependecies
      run: |
        poetry install --no-dev

    - name: Publish to PyPI
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
      run: |
        poetry publish --build -n

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: v${{ steps.version.outputs.version }}
        draft: false
        prerelease: false

    - name: Upload tarball
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/wavelink-stubs-${{ steps.version.outputs.version }}.tar.gz
        asset_name: wavelink-stubs-${{ steps.version.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload wheel
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/wavelink-stubs-${{ steps.version.outputs.version }}-py3-none-any.whl
        asset_name: wavelink-stubs-${{ steps.version.outputs.version }}-py3-none-any.whl
        asset_content_type: application/zip
